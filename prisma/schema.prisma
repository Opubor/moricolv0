// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  // url      = "./db.sqlite"
}

model User {
  id          Int     @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String  @unique
  role        String
  password    String
  dob         String?
  gender      String?
  phoneNumber String?
  profilePic  String?
}

model Customers {
  id         Int        @id @default(autoincrement())
  disabledAt DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  addresses  Address[]
  orders     Order[]
  wishlists  Wishlist[]
  reviews    Review[]

  @@map("Customer")
}

model Branch {
  id     Int      @id @default(autoincrement())
  name   String
  staffs Staffs[]
}

model Staffs {
  id             Int      @id @default(autoincrement())
  employeeStatus String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Branch         Branch?  @relation(fields: [branchId], references: [id])
  branchId       Int?

  @@map("Staff")
}

model Product {
  id            Int      @id @default(autoincrement())
  code          String   @unique
  name          String
  price         BigInt
  totalSales    BigInt
  productStatus String
  description String
  category String
  size String
  review        Review[]
}

model Order {
  id             Int          @id @default(autoincrement())
  referenceNo    String
  customerId     Int
  paymentId      Int
  orderStatus    String
  amount         BigInt
  customerNote   String
  completionDate DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Customer       Customers    @relation(fields: [customerId], references: [id])
  orderItems     OrderItems[]
  Payment        Payment[]
}

model Payment {
  id              Int      @id @default(autoincrement())
  reference       String
  customerId      Int
  amount          BigInt
  status          String
  type            String
  transactionNote String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Order           Order    @relation(fields: [orderId], references: [id])
  orderId         Int
}

model OrderItems {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  Order     Order @relation(fields: [orderId], references: [id])
}

model Wishlist {
  id         Int        @id @default(autoincrement())
  customerId Int
  productId  Int
  Customer   Customers? @relation(fields: [customerId], references: [id])
}

model Review {
  id         Int       @id @default(autoincrement())
  customerId Int
  comment    String
  rating     Int
  Customer   Customers @relation(fields: [customerId], references: [id])
  Product    Product?  @relation(fields: [productId], references: [id])
  productId  Int
}

model Address {
  id             Int        @id @default(autoincrement())
  customerId     Int
  fullName       String
  phoneNumber    Int
  email          String     @unique
  apt            String
  zipcode        Int
  city           String
  state          String
  country        String
  primaryAddress Boolean
  Customer       Customers? @relation(fields: [customerId], references: [id])

  @@map("ShippingAddress")
}

model category {
   id             Int        @id @default(autoincrement())
  categoryName     String @unique
}
